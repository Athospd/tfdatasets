% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataset_iterators.R
\name{iterator_get_next}
\alias{iterator_get_next}
\title{Tensor(s) for retreiving the next element from a dataset}
\usage{
iterator_get_next(x)
}
\arguments{
\item{x}{A dataset or an iterator}
}
\value{
Tensor(s) that can be evaluated to yield the next batch of training data.
}
\description{
Tensor(s) for retreiving the next element from a dataset
}
\section{Batch Iteration}{


In many cases you won't need to explicitly evaluate the tensors,
rather, you will pass the tensors to another function that will perform
the evaluation (e.g. the Keras \code{layer_input()} and \code{compile()} functions).

If you do need to perform iteration manually by evaluating the tensors, there
are a couple of possible approaches to controlling/detecting when iteration should
end.

One approach is to create a dataset that yields batches infinitely (traversing
the dataset multiple times with different batches randomly drawn). In this case you'd
use another mechanism like a global step counter or detecting a learning plateau.

Another approach is to detect when all batches have been yielded
from the dataset. When the tensor reaches the end of iteration a runtime
error will occur. You can catch and ignore the error when it occurs by wrapping
your iteration code in the \code{with_dataset()} function.

See the examples below for a demonstration of each of these methods of iteration.
}

\examples{
\dontrun{

# iteration with 'infinite' dataset and explicit step counter

library(tfdatasets)
dataset <- csv_dataset("training.csv") \%>\%
  dataset_prepare(x = c(mpg, disp), y = cyl) \%>\%
  dataset_shuffle(5000) \%>\%
  dataset_batch(128) \%>\%
  dataset_repeat()
batch <- iterator_get_next(dataset)
steps <- 200
for (i in 1:steps) {
  # use batch$x and batch$y tensors
}

# iteration that detects and ignores end of iteration error

library(tfdatasets)
dataset <- csv_dataset("training.csv") \%>\%
  dataset_prepare(x = c(mpg, disp), y = cyl) \%>\%
  dataset_batch(128) \%>\%
  dataset_repeat(10)
batch <- iterator_get_next(dataset)
with_dataset({
  while(TRUE) {
    # use batch$x and batch$y tensors
  }
})
}

}
\seealso{
Other iterators: \code{\link{with_dataset}}

Other iterators: \code{\link{with_dataset}}
}
