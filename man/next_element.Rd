% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataset_iterators.R
\name{next_element}
\alias{next_element}
\alias{next_element_tensor}
\alias{is_out_of_range_error}
\title{Get the next element from an iterator}
\usage{
next_element(iterator, session = "default", completed = NULL)

next_element_tensor(iterator)

is_out_of_range_error()
}
\arguments{
\item{iterator}{Dataset iterator}

\item{session}{TensorFlow session to evaluate iterator within. If not
specified then default TensorFlow session (as given by \code{tf$get_default_session()})
will be used if available.}

\item{completed}{Sentinel value to return from \code{next_element()} if the
iteration completes (defaults to \code{NULL} but can be any value you specify).}
}
\value{
For \code{next_element()}, the value of the next element, or \code{completed}
if there are no more elements available. For \code{next_element_tensor()}, a
tensor which can be evaluated repeatedly to obtain the next element.
}
\description{
Get the next element from an iterator
}
\section{Value Iteration}{

To iterate using \code{next_element()}, check for a \code{NULL} return value
(or other custom value specified via \code{completed}) to detect the
end of the iteration. For example:\preformatted{library(tfdatasets)
sess <- tf$Session()
dataset <- tensors_dataset(1:10)
iterator <- iterator_from_dataset(dataset)
while(!is.null(value <- next_element(iterator, sess))) {
  # do something with the value
}
}

Note that a TensorFlow session is required to evaluate element values.
If no session is provided and a default TensorFlow session exists (as
given by \code{tf$get_default_session()}) then it will be utilized.
}

\section{Tensor Iteration}{

If you use are iterating based on evaluating the tensor returned from
\code{next_element_tensor()} a runtime error will occur when the iterator
has exhausted all available elements. You can use the \code{is_out_of_range_error()}
to distinguish this error from other errors which may have occurred. For example:\preformatted{library(tfdatasets)
dataset <- tensors_dataset(1:10)
iterator <- iterator_from_dataset(dataset)
next_element <- next_element_tensor(iterator)
tryCatch({
  while(TRUE) {
    # do something with the next_element tensor
  }
},
error = function(e) {
  if (!is_out_of_range_error())
    stop(e)
})
}
}

